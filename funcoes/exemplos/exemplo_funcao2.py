# ------------------------------------------
# Exemplo: Fun√ß√µes Avan√ßadas em Python
# ------------------------------------------

# üìå 1. FUN√á√ÉO DENTRO DE FUN√á√ÉO (Nested Function)
# Uma fun√ß√£o pode ser definida dentro de outra para encapsular comportamentos.

def saudacao_personalizada(nome):
    """
    Esta fun√ß√£o recebe um nome e retorna uma mensagem de sauda√ß√£o personalizada.
    
    Par√¢metro:
    nome (str) - O nome da pessoa a ser cumprimentada.
    
    Retorno:
    str - Mensagem de sauda√ß√£o personalizada.
    """

    # Defini√ß√£o de uma fun√ß√£o interna
    def mensagem():
        return f"Ol√°, {nome}! Seja bem-vindo ao mundo da programa√ß√£o!"

    # Chamando a fun√ß√£o interna e retornando o resultado
    return mensagem()

# Testando a fun√ß√£o
print(saudacao_personalizada("Wendell"))

# ------------------------------------------
# üìå 2. FUN√á√ÉO LAMBDA (Fun√ß√£o An√¥nima)
# Lambda √© uma fun√ß√£o sem nome, √∫til para express√µes curtas.

# Criando uma fun√ß√£o lambda que multiplica um n√∫mero por 2
multiplicar_por_dois = lambda x: x * 2

# Testando a fun√ß√£o lambda
print("O dobro de 5 √©:", multiplicar_por_dois(5))

# ------------------------------------------
# üìå 3. FUN√á√ïES COM *args e **kwargs
# *args - Recebe m√∫ltiplos argumentos como uma tupla.
# **kwargs - Recebe m√∫ltiplos argumentos nomeados como um dicion√°rio.

def soma_varios(*args):
    """
    Esta fun√ß√£o recebe v√°rios n√∫meros e retorna a soma deles.

    Par√¢metro:
    *args (int ou float) - V√°rios n√∫meros a serem somados.

    Retorno:
    int ou float - A soma de todos os n√∫meros fornecidos.
    """
    return sum(args)  # Soma todos os valores dentro de *args

# Testando a fun√ß√£o com m√∫ltiplos valores
print("Soma de 2, 4, 6, 8:", soma_varios(2, 4, 6, 8))

def dados_pessoais(**kwargs):
    """
    Esta fun√ß√£o recebe dados pessoais como argumentos nomeados e os imprime.
    
    Par√¢metros:
    **kwargs (dict) - Argumentos nomeados (exemplo: nome, idade, cidade).

    Retorno:
    Nenhum (apenas exibe as informa√ß√µes).
    """
    for chave, valor in kwargs.items():
        print(f"{chave.capitalize()}: {valor}")

# Testando a fun√ß√£o com m√∫ltiplos dados
dados_pessoais(nome="Wendell", idade=18, cidade="Guarulhos")
